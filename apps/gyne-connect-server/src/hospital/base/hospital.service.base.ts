/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Hospital as PrismaHospital,
  Appointment as PrismaAppointment,
  Location as PrismaLocation,
} from "@prisma/client";

export class HospitalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HospitalCountArgs, "select">): Promise<number> {
    return this.prisma.hospital.count(args);
  }

  async hospitals(
    args: Prisma.HospitalFindManyArgs
  ): Promise<PrismaHospital[]> {
    return this.prisma.hospital.findMany(args);
  }
  async hospital(
    args: Prisma.HospitalFindUniqueArgs
  ): Promise<PrismaHospital | null> {
    return this.prisma.hospital.findUnique(args);
  }
  async createHospital(
    args: Prisma.HospitalCreateArgs
  ): Promise<PrismaHospital> {
    return this.prisma.hospital.create(args);
  }
  async updateHospital(
    args: Prisma.HospitalUpdateArgs
  ): Promise<PrismaHospital> {
    return this.prisma.hospital.update(args);
  }
  async deleteHospital(
    args: Prisma.HospitalDeleteArgs
  ): Promise<PrismaHospital> {
    return this.prisma.hospital.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.hospital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }

  async findLocations(
    parentId: string,
    args: Prisma.LocationFindManyArgs
  ): Promise<PrismaLocation[]> {
    return this.prisma.hospital
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .locations(args);
  }
}
